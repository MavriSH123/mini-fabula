// === –†–∞–±–æ—Ç–∞ —Å –ø–∞–ø–∫–∞–º–∏ ===
let currentFolderId = 'root';
let folders = [];

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
async function loadFolders() {
  if (!accessToken) return;

  try {
    const response = await fetch(
      'https://www.googleapis.com/drive/v3/files?' +
      'q=mimeType=\'application/vnd.google-apps.folder\' and name contains \'fabula\'&' +
      'fields=files(id,name)',
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      }
    );

    const data = await response.json();
    folders = data.files || [];
    displayFolders();
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–æ–∫: " + error.message);
  }
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–∞–ø–∫–∏ –≤ –¥–µ—Ä–µ–≤–µ
function displayFolders() {
  const folderTree = document.getElementById('folderTree');
  
  // –û—á–∏—â–∞–µ–º, –∫—Ä–æ–º–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
  const rootItem = folderTree.querySelector('[data-id="root"]');
  const isActive = rootItem.classList.contains('active');
  folderTree.innerHTML = '';
  folderTree.appendChild(rootItem);
  if (isActive) {
    rootItem.classList.add('active');
  }

  folders.forEach(folder => {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "fabula_" –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏
    const displayName = folder.name.replace('fabula_', '');
    
    const folderItem = document.createElement('div');
    folderItem.className = 'folder-item';
    folderItem.setAttribute('data-id', folder.id);
    folderItem.onclick = () => selectFolder(folder.id, folderItem);
    
    folderItem.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
          üìÅ ${displayName}
        </div>
        ${folder.id !== 'root' ? `
          <button onclick="event.stopPropagation(); deleteFolder('${folder.id}', '${displayName}')" 
                  style="background-color: #dc3545; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer;">
            üóëÔ∏è
          </button>
        ` : ''}
      </div>
    `;
    
    folderTree.appendChild(folderItem);
  });
}

// –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É
function selectFolder(folderId, element) {
  // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –ø–∞–ø–æ–∫
  document.querySelectorAll('.folder-item').forEach(item => {
    item.classList.remove('active');
  });
  
  // –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
  if (element) {
    element.classList.add('active');
  }
  
  currentFolderId = folderId;
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–∞–ø–∫–æ–π
  document.getElementById('folderActions').style.display = 'block';
  
  showStatus(`üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: ${folderId === 'root' ? '–í—Å–µ —Ñ–∞–π–ª—ã' : '–ø–∞–ø–∫–∞'}`);
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
  showFilesInFolder(folderId);
}
