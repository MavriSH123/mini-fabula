// === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ===
let currentFileName = 'fabula_story.txt';
let currentFileId = null; // –ù–æ–≤—ã–π ID —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
async function showFilesInFolder(folderId) {
  if (!accessToken) return;

  showStatus("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...");

  try {
    let query;
    if (folderId === 'root') {
      query = 'mimeType=\'text/plain\' and name contains \'fabula\' and \'root\' in parents';
    } else {
      query = `mimeType='text/plain' and '${folderId}' in parents`;
    }

    const response = await fetch(
      'https://www.googleapis.com/drive/v3/files?' +
      `q=${encodeURIComponent(query)}&` +
      'fields=files(id,name,modifiedTime)&' +
      'orderBy=modifiedTime desc',
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      }
    );

    const data = await response.json();
    
    const folderFiles = document.getElementById('folderFiles');
    folderFiles.innerHTML = '';
    
    if (data.files && data.files.length > 0) {
      data.files.forEach(file => {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        fileItem.innerHTML = `
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <div onclick="loadFileFromDrive('${file.id}', '${file.name}')">
              <strong>${file.name}</strong><br>
              <small>${new Date(file.modifiedTime).toLocaleString('ru-RU')}</small>
            </div>
            <button onclick="deleteFile('${file.id}', '${file.name}')" 
                    style="background-color: #dc3545; color: white; border: none; border-radius: 3px; padding: 2px 6px; font-size: 12px; cursor: pointer;">
              üóëÔ∏è
            </button>
          </div>
        `;
        folderFiles.appendChild(fileItem);
      });
    } else {
      folderFiles.innerHTML = '<div style="color: #666; font-size: 14px;">–ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞</div>';
    }
    
    showStatus(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.files ? data.files.length : 0} —Ñ–∞–π–ª–æ–≤`);
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: " + error.message);
  }
}

// –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
async function createFile() {
  if (!accessToken) {
    showStatus("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Google!");
    return;
  }

  const fileName = document.getElementById('fileName').value.trim();
  if (!fileName) {
    showStatus("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞");
    return;
  }

  showStatus("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...");

  try {
    // –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–º –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const currentText = document.getElementById('editor').value || "";
    console.log(`–¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:`, currentText);
    
    const blob = new Blob([currentText], { type: 'text/plain' });
    
    const fullFileName = fileName.endsWith('.txt') ? fileName : `${fileName}.txt`;

    const metadata = {
      name: fullFileName,
      mimeType: 'text/plain'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ—Ä–Ω–µ–≤–∞—è
    if (currentFolderId !== 'root') {
      metadata.parents = [currentFolderId];
    }

    const form = new FormData();
    form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
    form.append('file', blob);

    const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`
      },
      body: form
    });

    if (response.ok) {
      const fileData = await response.json();
      showStatus(`‚úÖ –§–∞–π–ª "${fullFileName}" —Å–æ–∑–¥–∞–Ω!`);
      closeCreateFileModal();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∏ ID —Ñ–∞–π–ª–∞
      currentFileName = fullFileName;
      currentFileId = fileData.id;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
      showFilesInFolder(currentFolderId);
    } else {
      const error = await response.json();
      throw new Error(error.error.message);
    }
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞: " + error.message);
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
async function saveCurrentFileToFolder() {
  if (!accessToken) {
    showStatus("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Google!");
    return;
  }

  const text = document.getElementById('editor').value;
  const blob = new Blob([text], { type: 'text/plain' });

  showStatus("‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...");

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å ID —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    if (currentFileId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
      await updateExistingFile(currentFileId, currentFileName, blob);
    } else {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
      await createNewFileWithUniqueName(blob);
    }
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞: " + error.message);
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
async function updateExistingFile(fileId, fileName, blob) {
  try {
    const response = await fetch(`https://www.googleapis.com/upload/drive/v3/files/${fileId}`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'text/plain'
      },
      body: blob
    });

    if (response.ok) {
      showStatus(`‚úÖ –§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!`);
      // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
      showFilesInFolder(currentFolderId);
    } else {
      const errorText = await response.text();
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${response.status}`);
    }
  } catch (error) {
    console.error(error);
    throw error;
  }
}

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
async function createNewFileWithUniqueName(blob) {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
    const now = new Date();
    const timestamp = now.toISOString().slice(0, 19).replace(/:/g, '-');
    const fileName = `fabula_${timestamp}.txt`;

    const metadata = {
      name: fileName,
      mimeType: 'text/plain'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ—Ä–Ω–µ–≤–∞—è
    if (currentFolderId !== 'root') {
      metadata.parents = [currentFolderId];
    }

    const form = new FormData();
    form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
    form.append('file', blob);

    const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`
      },
      body: form
    });

    if (response.ok) {
      const fileData = await response.json();
      showStatus(`‚úÖ –§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫—É!`);
      currentFileName = fileName;
      currentFileId = fileData.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
      // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
      showFilesInFolder(currentFolderId);
    } else {
      const error = await response.json();
      throw new Error(error.error.message);
    }
  } catch (error) {
    console.error(error);
    throw error;
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Drive
async function saveToGoogleDrive() {
  if (!accessToken) {
    showStatus("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Google!");
    return;
  }

  const text = document.getElementById('editor').value;
  const blob = new Blob([text], { type: 'text/plain' });

  showStatus("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive...");

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å ID —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
    if (currentFileId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
      await updateExistingFile(currentFileId, currentFileName, blob);
    } else {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
      await createNewFileWithUniqueName(blob);
    }
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞: " + error.message);
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Google Drive
async function loadFileFromDrive(fileId, fileName) {
  try {
    showStatus(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${fileName}...`);
    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: ${fileName}, ID: ${fileId}`);
    
    const response = await fetch(
      `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      }
    );
    
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    
    if (response.ok) {
      const text = await response.text();
      console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç editor
      const editor = document.getElementById('editor');
      if (editor) {
        editor.value = text;
        console.log('–¢–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä');
      } else {
        console.error('–≠–ª–µ–º–µ–Ω—Ç editor –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        throw new Error('–≠–ª–µ–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      currentFileName = fileName;
      currentFileId = fileId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞
      showStatus(`‚úÖ –§–∞–π–ª ${fileName} –∑–∞–≥—Ä—É–∂–µ–Ω!`);
      console.log(`–§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`);
      
      // –°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
      const fileList = document.getElementById('fileList');
      if (fileList) {
        fileList.style.display = 'none';
      }
    } else {
      const errorText = await response.text();
      console.error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`, errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} - ${errorText}`);
    }
  } catch (error) {
    console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    showStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: " + error.message);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive
async function listGoogleDriveFiles() {
  if (!accessToken) {
    showStatus("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Google!");
    return;
  }

  showStatus("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...");

  try {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt
    const response = await fetch(
      'https://www.googleapis.com/drive/v3/files?' +
      'q=mimeType=\'text/plain\' and name contains \'fabula\'&' +
      'fields=files(id,name,modifiedTime)&' +
      'orderBy=modifiedTime desc',
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      }
    );

    const data = await response.json();
    
    if (data.files && data.files.length > 0) {
      displayFileList(data.files);
      showStatus(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.files.length} —Ñ–∞–π–ª–æ–≤`);
    } else {
      showStatus("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤");
    }
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: " + error.message);
  }
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
function displayFileList(files) {
  const fileListDiv = document.getElementById('fileList');
  const filesContainer = document.getElementById('filesContainer');
  
  filesContainer.innerHTML = '';
  
  files.forEach(file => {
    const fileItem = document.createElement('div');
    fileItem.className = 'file-item';
    fileItem.innerHTML = `
      <strong>${file.name}</strong><br>
      <small>${new Date(file.modifiedTime).toLocaleString('ru-RU')}</small>
    `;
    fileItem.onclick = () => loadFileFromDrive(file.id, file.name);
    filesContainer.appendChild(fileItem);
  });
  
  fileListDiv.style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
function showCurrentFolderFiles() {
  showFilesInFolder(currentFolderId);
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
function saveLocally() {
  const text = document.getElementById('editor').value;
  const blob = new Blob([text], { type: 'text/plain' });
  const a = document.createElement('a');
  a.href = URL.createObjectURL(blob);
  a.download = currentFileName;
  a.click();
  showStatus("üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ");
}

// –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
async function deleteFile(fileId, fileName) {
  if (confirm(`–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${fileName}"?`)) {
    try {
      showStatus(`‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ "${fileName}"...`);
      
      const response = await fetch(`https://www.googleapis.com/drive/v3/files/${fileId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });
      
      if (response.ok) {
        showStatus(`‚úÖ –§–∞–π–ª "${fileName}" —É–¥–∞–ª—ë–Ω!`);
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        showFilesInFolder(currentFolderId);
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –æ—Ç–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª - –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
        if (currentFileName === fileName) {
          document.getElementById('editor').value = '';
          currentFileName = 'fabula_story.txt';
          currentFileId = null;
        }
      } else {
        const error = await response.json();
        throw new Error(error.error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
      }
    } catch (error) {
      console.error(error);
      showStatus("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + error.message);
    }
  }
}

// –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É
async function deleteFolder(folderId, folderName) {
  if (confirm(`–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É "${folderName}"? –í—Å–µ —Ñ–∞–π–ª—ã –≤ –Ω–µ–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!`)) {
    try {
      showStatus(`‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ "${folderName}"...`);
      
      const response = await fetch(`https://www.googleapis.com/drive/v3/files/${folderId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });
      
      if (response.ok) {
        showStatus(`‚úÖ –ü–∞–ø–∫–∞ "${folderName}" —É–¥–∞–ª–µ–Ω–∞!`);
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        loadFolders();
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∫–æ—Ä–Ω–µ–≤—É—é
        if (currentFolderId === folderId) {
          selectFolder('root', document.querySelector('.folder-item[data-id="root"]'));
        }
      } else {
        const error = await response.json();
        throw new Error(error.error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏');
      }
    } catch (error) {
      console.error(error);
      showStatus("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: " + error.message);
    }
  }
}
