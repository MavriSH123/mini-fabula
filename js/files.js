// === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ===
let currentFileName = 'fabula_story.txt';

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
async function showFilesInFolder(folderId) {
  if (!accessToken) return;

  showStatus("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...");

  try {
    let query;
    if (folderId === 'root') {
      query = 'mimeType=\'text/plain\' and name contains \'fabula\' and \'root\' in parents';
    } else {
      query = `mimeType='text/plain' and '${folderId}' in parents`;
    }

    const response = await fetch(
      'https://www.googleapis.com/drive/v3/files?' +
      `q=${encodeURIComponent(query)}&` +
      'fields=files(id,name,modifiedTime)&' +
      'orderBy=modifiedTime desc',
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      }
    );

    const data = await response.json();
    
    const folderFiles = document.getElementById('folderFiles');
    folderFiles.innerHTML = '';
    
    if (data.files && data.files.length > 0) {
      data.files.forEach(file => {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';
        fileItem.innerHTML = `
          <strong>${file.name}</strong><br>
          <small>${new Date(file.modifiedTime).toLocaleString('ru-RU')}</small>
        `;
        fileItem.onclick = () => loadFileFromDrive(file.id, file.name);
        folderFiles.appendChild(fileItem);
      });
    } else {
      folderFiles.innerHTML = '<div style="color: #666; font-size: 14px;">–ü—É—Å—Ç–∞—è –ø–∞–ø–∫–∞</div>';
    }
    
    showStatus(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.files ? data.files.length : 0} —Ñ–∞–π–ª–æ–≤`);
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: " + error.message);
  }
}

// –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
async function createFile() {
  if (!accessToken) {
    showStatus("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Google!");
    return;
  }

  const fileName = document.getElementById('fileName').value.trim();
  if (!fileName) {
    showStatus("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞");
    return;
  }

  showStatus("‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...");

  try {
    // –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
    const content = "";
    const blob = new Blob([content], { type: 'text/plain' });
    
    const fullFileName = fileName.endsWith('.txt') ? fileName : `${fileName}.txt`;

    const metadata = {
      name: fullFileName,
      mimeType: 'text/plain'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ—Ä–Ω–µ–≤–∞—è
    if (currentFolderId !== 'root') {
      metadata.parents = [currentFolderId];
    }

    const form = new FormData();
    form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
    form.append('file', blob);

    const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`
      },
      body: form
    });

    if (response.ok) {
      const fileData = await response.json();
      showStatus(`‚úÖ –§–∞–π–ª "${fullFileName}" —Å–æ–∑–¥–∞–Ω!`);
      closeCreateFileModal();
      
      // –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      document.getElementById('editor').value = '';
      currentFileName = fullFileName;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
      showFilesInFolder(currentFolderId);
    } else {
      const error = await response.json();
      throw new Error(error.error.message);
    }
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞: " + error.message);
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
async function saveCurrentFileToFolder() {
  if (!accessToken) {
    showStatus("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Google!");
    return;
  }

  const text = document.getElementById('editor').value;
  const blob = new Blob([text], { type: 'text/plain' });

  showStatus("‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...");

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
    const now = new Date();
    const timestamp = now.toISOString().slice(0, 19).replace(/:/g, '-');
    const fileName = `fabula_${timestamp}.txt`;

    const metadata = {
      name: fileName,
      mimeType: 'text/plain'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ—Ä–Ω–µ–≤–∞—è
    if (currentFolderId !== 'root') {
      metadata.parents = [currentFolderId];
    }

    const form = new FormData();
    form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
    form.append('file', blob);

    const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`
      },
      body: form
    });

    if (response.ok) {
      showStatus(`‚úÖ –§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫—É!`);
      currentFileName = fileName;
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
      showFilesInFolder(currentFolderId);
    } else {
      const error = await response.json();
      throw new Error(error.error.message);
    }
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞: " + error.message);
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Drive
async function saveToGoogleDrive() {
  if (!accessToken) {
    showStatus("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Google!");
    return;
  }

  const text = document.getElementById('editor').value;
  const blob = new Blob([text], { type: 'text/plain' });

  showStatus("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Drive...");

  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
    const now = new Date();
    const timestamp = now.toISOString().slice(0, 19).replace(/:/g, '-');
    const fileName = `fabula_${timestamp}.txt`;

    const metadata = {
      name: fileName,
      mimeType: 'text/plain'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ—Ä–Ω–µ–≤–∞—è
    if (currentFolderId !== 'root') {
      metadata.parents = [currentFolderId];
    }

    const form = new FormData();
    form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
    form.append('file', blob);

    const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`
      },
      body: form
    });

    if (response.ok) {
      showStatus(`‚úÖ –§–∞–π–ª ${fileName} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Google Drive!`);
      currentFileName = fileName;
      
      // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
      showFilesInFolder(currentFolderId);
    } else {
      const error = await response.json();
      throw new Error(error.error.message);
    }
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞: " + error.message);
  }
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏–∑ Google Drive
async function loadFileFromDrive(fileId, fileName) {
  try {
    showStatus(`‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${fileName}...`);
    
    const response = await fetch(
      `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      }
    );
    
    if (response.ok) {
      const text = await response.text();
      document.getElementById('editor').value = text;
      currentFileName = fileName;
      showStatus(`‚úÖ –§–∞–π–ª ${fileName} –∑–∞–≥—Ä—É–∂–µ–Ω!`);
      
      // –°–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
      const fileList = document.getElementById('fileList');
      if (fileList) {
        fileList.style.display = 'none';
      }
    } else {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status}`);
    }
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: " + error.message);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ Google Drive
async function listGoogleDriveFiles() {
  if (!accessToken) {
    showStatus("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —á–µ—Ä–µ–∑ Google!");
    return;
  }

  showStatus("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...");

  try {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt
    const response = await fetch(
      'https://www.googleapis.com/drive/v3/files?' +
      'q=mimeType=\'text/plain\' and name contains \'fabula\'&' +
      'fields=files(id,name,modifiedTime)&' +
      'orderBy=modifiedTime desc',
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      }
    );

    const data = await response.json();
    
    if (data.files && data.files.length > 0) {
      displayFileList(data.files);
      showStatus(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.files.length} —Ñ–∞–π–ª–æ–≤`);
    } else {
      showStatus("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤");
    }
  } catch (error) {
    console.error(error);
    showStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: " + error.message);
  }
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
function displayFileList(files) {
  const fileListDiv = document.getElementById('fileList');
  const filesContainer = document.getElementById('filesContainer');
  
  filesContainer.innerHTML = '';
  
  files.forEach(file => {
    const fileItem = document.createElement('div');
    fileItem.className = 'file-item';
    fileItem.innerHTML = `
      <strong>${file.name}</strong><br>
      <small>${new Date(file.modifiedTime).toLocaleString('ru-RU')}</small>
    `;
    fileItem.onclick = () => loadFileFromDrive(file.id, file.name);
    filesContainer.appendChild(fileItem);
  });
  
  fileListDiv.style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
function showCurrentFolderFiles() {
  showFilesInFolder(currentFolderId);
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
function saveLocally() {
  const text = document.getElementById('editor').value;
  const blob = new Blob([text], { type: 'text/plain' });
  const a = document.createElement('a');
  a.href = URL.createObjectURL(blob);
  a.download = currentFileName;
  a.click();
  showStatus("üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ");
}
